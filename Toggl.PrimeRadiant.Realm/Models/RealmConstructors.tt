<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text.RegularExpressions"
#><#@ import namespace="System.Linq"
#>using Realms;
using System.Linq;
using Toggl.Multivac.Models;
using Toggl.PrimeRadiant.Models;

namespace Toggl.PrimeRadiant.Realm
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Multivac/Models/" );
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirst = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IBaseModel") continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);
        var realmClassName = $"Realm{className}";

        if (!isFirst)
            WriteLine("");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var isStartOfClass = line.Contains($" interface {interfaceName}");
            if (isStartOfClass)
            {
                var extendsIBaseModel = line.Contains(": IBaseModel");

                WriteLine($"    internal partial class {realmClassName}");
                WriteLine( "    {");

                if (extendsIBaseModel)
                {
                    WriteLine( "        [PrimaryKey]");
                    WriteLine( "        public long Id { get; set; }\n");
                }

                WriteLine( "        public bool IsDirty { get; set; }\n");
                WriteLine($"        public {realmClassName}() {{ }}\n");
                
                var databaseInterfaceName = $"IDatabase{className}";
                var databaseInterfaceFileName = Path.Combine(filePath, "../../Toggl.PrimeRadiant/Models/", databaseInterfaceName + ".cs");
                var databaseInterfaceExists = File.Exists(databaseInterfaceFileName);

                if (databaseInterfaceExists)
                {
                    WriteLine($"        public {realmClassName}({databaseInterfaceName} entity, Realms.Realm realm)");
                    WriteLine($"            : this(entity as {interfaceName}, realm)");
                    WriteLine( "        {");
                    WriteLine( "            IsDirty = entity.IsDirty;");
                    WriteLine( "        }\n");
                }

                WriteLine($"        public {realmClassName}({interfaceName} entity, Realms.Realm realm)");
                WriteLine( "        {");

                if (extendsIBaseModel)
                {
                    WriteLine("            Id = entity.Id;");
                }

                continue;
            }

            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            var isRealmProperty = Regex.IsMatch(line, ".Id ")
                && !Regex.IsMatch(line, "^[ ]*[^ ]+Id ") // the type itself (the first token) must not end with "Id"
                && !line.Contains("Default");
            var trimmedLine = line.Trim();
            var indexOfPropName = trimmedLine.IndexOf(" ") + 1;
            var propName = trimmedLine.Substring(indexOfPropName, trimmedLine.Length - 9 - indexOfPropName);
            var assignment = $"entity.{propName}";

            if (isRealmProperty)
            {
                var entityName = propName.Replace("Id", "");
                WriteLine($"            var skip{entityName}Fetch = entity?.{entityName}Id == null || entity.{entityName}Id == 0;");

                propName = $"Realm{entityName}";
                assignment = $"skip{entityName}Fetch ? null : realm.All<{propName}>().Single(x => x.Id == entity.{entityName}Id)";
            }

            WriteLine($"            {propName} = {assignment};");
        }

        WriteLine( "            IsDirty = true;");
        WriteLine("        }");
        WriteLine("    }");

        isFirst = false;
    }
#>}